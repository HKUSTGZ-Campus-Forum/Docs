openapi: 3.0.0
info:
  title: Comment Management API
  version: 1.0.0
  description: API for comment management in the campus forum.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Comment:
      type: object
      properties:
        comment_id:
          type: integer
        post_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
#        embedding:
#          type: object
        parent_comment_id:
          type: integer
#        is_deleted:
#          type: boolean
        created_at:
          type: string
          format: date-time
#        updated_at:
#          type: string
#          format: date-time

    NewComment:
      type: object
      required:
        - post_id
        - user_id
        - content
      properties:
        post_id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        embedding:
          type: object
        parent_comment_id:
          type: integer
    
    CommentWithReplies:
      type: object
      allOf:
        - $ref: '#/components/schemas/Comment'
        - type: object
          properties:
            replies:
              type: array
              items:
                $ref: '#/components/schemas/Comment'

paths:
  /comments:
    get:
      summary: Retrieve a list of comments
      description: Get a paginated list of comments with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of comments per page
          schema:
            type: integer
            default: 20
        - name: user_id
          in: query
          description: Filter comments by user ID
          schema:
            type: integer
        - name: post_id
          in: query
          description: Filter comments by post ID
          schema:
            type: integer
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
                  total_count:
                    type: integer
                  total_pages:
                    type: integer
                  current_page:
                    type: integer
        '400':
          description: Bad request
        '500':
          description: Internal server error
    
    post:
      summary: Create a new comment
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewComment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Post not found
        '500':
          description: Internal server error

  /comments/{comment_id}:
    get:
      summary: Retrieve a specific comment
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
        - name: include_replies
          in: query
          description: Whether to include replies to this comment
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Comment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentWithReplies'
        '404':
          description: Comment not found
        '500':
          description: Internal server error
    
    put:
      summary: Update a comment
      security:
        - BearerAuth: []
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                embedding:
                  type: object
      responses:
        '200':
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user doesn't have permission to update this comment
        '404':
          description: Comment not found
        '500':
          description: Internal server error
    
    delete:
      summary: Delete a comment
      security:
        - BearerAuth: []
      parameters:
        - name: comment_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Comment deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user doesn't have permission to delete this comment
        '404':
          description: Comment not found
        '500':
          description: Internal server error

  /posts/{post_id}/comments:
    get:
      summary: Retrieve comments for a specific post
      description: Get comments for a post with optional pagination and filtering
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of comments per page
          schema:
            type: integer
            default: 20
        - name: sort_by
          in: query
          description: Field to sort comments by
          schema:
            type: string
            enum: [created_at, updated_at]
            default: created_at
        - name: sort_order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
        - name: include_replies
          in: query
          description: Whether to include replies to comments
          schema:
            type: boolean
            default: true
        - name: top_level_only
          in: query
          description: Whether to return only top-level comments (no replies)
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Comments for the post
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommentWithReplies'
                  total_count:
                    type: integer
                  total_pages:
                    type: integer
                  current_page:
                    type: integer
        '404':
          description: Post not found
        '500':
          description: Internal server error
