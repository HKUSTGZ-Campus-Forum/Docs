openapi: 3.0.0
info:
  title: Post Management API
  version: 1.0.0
  description: API for post management in the campus forum.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    Post:
      type: object
      properties:
        post_id:
          type: integer
        user_id:
          type: integer
        title:
          type: string
        content:
          type: string
        embedding:
          type: object
        comment_count:
          type: integer
        reaction_count:
          type: integer
        views_count:
          type: integer
        is_deleted:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    NewPost:
      type: object
      required:
        - user_id
        - title
        - content
      properties:
        user_id:
          type: integer
        title:
          type: string
        content:
          type: string
        embedding:
          type: object
    
    HotPost:
      type: object
      properties:
        postID:
          type: integer
        title:
          type: string
        content_preview:
          type: string
        comment_count:
          type: integer
        click_count:
          type: integer
        time:
          type: string
          format: date-time
        most_frequent_reaction_count:
          type: integer
        most_frequent_reaction:
          $ref: '#/components/schemas/Emoji'
        user_choice:
          type: string
          nullable: true
        background_url:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    
    PostDetail:
      type: object
      properties:
        postID:
          type: integer
        title:
          type: string
        content:
          type: string
        reaction_list:
          type: array
          items:
            type: object
            properties:
              emoji:
                $ref: '#/components/schemas/Emoji'
              emoji_count:
                type: integer
        click_count:
          type: integer
        background_url:
          type: string
        time:
          type: string
          format: date-time
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        comments_list:
          type: array
          items:
            type: object
            properties:
              content:
                type: string
              parent_comment_id:
                type: integer
              time:
                type: string
                format: date-time
              reaction_list:
                type: array
                items:
                  type: object
                  properties:
                    emoji:
                      $ref: '#/components/schemas/Emoji'
                    emoji_count:
                      type: integer
              post_id:
                type: integer
    
    Emoji:
      type: object
      properties:
        emoji_id:
          type: integer
        emoji_code:
          type: string
        description:
          type: string
        image_url:
          type: string
        display_order:
          type: integer
    
    Tag:
      type: object
      properties:
        tag_name:
          type: string
        isImportant:
          type: boolean
        tagcolor:
          type: string

paths:
  /posts:
    get:
      summary: Retrieve a list of posts
      description: Get a paginated list of posts with optional filtering
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of posts per page
          schema:
            type: integer
            default: 20
        - name: user_id
          in: query
          description: Filter posts by user ID
          schema:
            type: integer
        - name: sort_by
          in: query
          description: Field to sort posts by
          schema:
            type: string
            enum: [created_at, updated_at, views_count, comment_count, reaction_count]
            default: created_at
        - name: sort_order
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: A list of posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  total_count:
                    type: integer
                  total_pages:
                    type: integer
                  current_page:
                    type: integer
        '400':
          description: Bad request
        '500':
          description: Internal server error
    
    post:
      summary: Create a new post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /posts/{post_id}:
    get:
      summary: Retrieve detailed information about a specific post
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Detailed information about the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetail'
        '400':
          description: Bad request
        '404':
          description: Post not found
        '500':
          description: Internal server error
    
    put:
      summary: Update a post
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '200':
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user doesn't have permission to update this post
        '404':
          description: Post not found
        '500':
          description: Internal server error
    
    delete:
      summary: Delete a post
      security:
        - BearerAuth: []
      parameters:
        - name: post_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Post deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - user doesn't have permission to delete this post
        '404':
          description: Post not found
        '500':
          description: Internal server error

  /posts/hot:
    get:
      summary: Retrieve a list of hot posts
      description: Get posts sorted by popularity metrics (views, reactions, comments)
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: Number of hot posts to return
          schema:
            type: integer
            default: 10
        - name: algorithm
          in: query
          description: Algorithm to determine hot posts
          schema:
            type: string
            enum: [trending, most_viewed, most_reacted, most_commented]
            default: trending
      responses:
        '200':
          description: A list of hot posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HotPost'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /posts/search:
    get:
      summary: Search posts
      description: Search posts by keywords or semantic similarity
      parameters:
        - name: q
          in: query
          description: Search query
          required: true
          schema:
            type: string
        - name: search_type
          in: query
          description: Type of search to perform
          schema:
            type: string
            enum: [keyword, semantic]
            default: keyword
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of posts per page
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  total_count:
                    type: integer
                  total_pages:
                    type: integer
                  current_page:
                    type: integer
        '400':
          description: Bad request
        '500':
          description: Internal server error
