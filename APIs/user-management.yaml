openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for user management in the campus forum.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
          description: 3-50 characters; letters, numbers and underscores only
        email:
          type: string
          description: Must be a valid email format
        email_verified:
          type: boolean
        phone_number:
          type: string
          description: 10-15 digits, optionally with a + prefix
        phone_verified:
          type: boolean
        profile_picture_url:
          type: string
        role_id:
          type: integer
        role_name:
          type: string
          enum: [admin, moderator, user]
        is_deleted:
          type: boolean
        created_at:
          type: string
          format: date-time

    NewUser:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: 3-50 characters; letters, numbers and underscores only
        password:
          type: string
          description: Password will be hashed on the server
        email:
          type: string
          description: Must be a valid email format
        phone_number:
          type: string
          description: 10-15 digits, optionally with a + prefix
        profile_picture_url:
          type: string
        role_id:
          type: integer
    
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: Short-lived JWT token (15 minutes) for API access
        refresh_token:
          type: string
          description: Long-lived token (30 days) used to obtain new access tokens
        user:
          $ref: '#/components/schemas/User'

paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request (username exists, invalid format, etc.)
  
  /users/{user_id}:
    get:
      summary: Retrieve a specific user
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    
    put:
      summary: Update a user
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
                phone_number:
                  type: string
                profile_picture_url:
                  type: string
                role_id:
                  type: integer
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    
    delete:
      summary: Delete a user (soft delete)
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User soft-deleted successfully
        '404':
          description: User not found

  /auth/login:
    post:
      summary: Authenticate a user and get JWT tokens
      description: |
        Login with username and password to receive access and refresh tokens.
        The access token is short-lived (15 minutes) and used for API calls.
        The refresh token is longer-lived (30 days) and used only to get new access tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Authentication failed

  /auth/refresh:
    post:
      summary: Refresh JWT access token
      description: |
        Get a new access token using a valid refresh token.
        This endpoint should be called when the access token expires.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '401':
          description: Invalid or expired refresh token

  /auth/logout:
    post:
      summary: Logout (revoke current token)
      description: |
        Revoke the current JWT token to implement logout.
        The token will be added to a blacklist and can't be used again.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
        '401':
          description: Unauthorized
          